name: Claude Code

on:
    issue_comment:
        types: [created]
    pull_request_review_comment:
        types: [created]
    issues:
        types: [opened, assigned]
    pull_request_review:
        types: [submitted]

jobs:
    claude:
        if: |
            (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
            (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
            (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
            (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))

        runs-on: ubuntu-latest

        permissions:
            contents: write
            pull-requests: write
            issues: write
            id-token: write

        steps:
            - name: Extract Prompt from event
              id: get_prompt
              uses: actions/github-script@v7
              with:
                script: |
                  let body = '';
                  if (context.eventName === 'issue_comment' || context.eventName === 'pull_request_review_comment') {
                    body = context.payload.comment.body;
                  } else if (context.eventName === 'pull_request_review') {
                    body = context.payload.review.body;
                  } else if (context.eventName === 'issues') {
                    const issueBody = context.payload.issue.body || '';
                    const issueTitle = context.payload.issue.title || '';
                    if (issueBody.includes('@claude')) {
                       body = issueBody;
                    } else if (issueTitle.includes('@claude')) {
                       body = issueTitle + '\n\n' + issueBody;
                    }
                  }
                  
                  const prompt = `
                  The user mentioned @claude in a GitHub context.
                  Here is the full body of their message:
                  ---
                  ${body}
                  ---
                  Please act on this message as a helpful AI assistant.
                  The user's original message might just be the mention "@claude"
                  in which case you should look at the context of the issue or PR and provide a helpful response.
                  If the user has provided a specific instruction, please follow it.
                  Your response will be posted back as a comment.
                  `;
                  core.setOutput('prompt_text', prompt);
                result-encoding: string

            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Run Claude Code
              id: claude
              uses: nanameru/claude-code-base-action@main
              with:
                  prompt: ${{ steps.get_prompt.outputs.prompt_text }}
                  allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,BatchTool,Write"
                  use_oauth: 'true'
                  claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
                  claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
                  claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}

            - name: Post Claude's Reply
              if: steps.claude.outputs.conclusion == 'success'
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const fs = require('fs');
                  const executionFile = '${{ steps.claude.outputs.execution_file }}';
                  if (!fs.existsSync(executionFile)) {
                    core.setFailed(`Execution file not found: ${executionFile}`);
                    return;
                  }
                  const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));

                  let reply = '';
                  for (let i = executionLog.length - 1; i >= 0; i--) {
                    if (executionLog[i].role === 'assistant' && typeof executionLog[i].content === 'string') {
                      reply = executionLog[i].content;
                      break;
                    } else if (executionLog[i].role === 'assistant' && Array.isArray(executionLog[i].content) && executionLog[i].content.length > 0) {
                        const textContent = executionLog[i].content.find(c => c.type === 'text');
                        if (textContent) {
                            reply = textContent.text;
                            break;
                        }
                    }
                  }

                  if (reply) {
                    const issueNumber = context.issue.number;
                    if (!issueNumber) {
                        console.log('Could not find issue number in context.');
                        return;
                    }
                    github.rest.issues.createComment({
                      issue_number: issueNumber,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: reply + "\n\n*Reply generated by @claude*"
                    });
                  } else {
                    console.log("No final assistant reply found to post.");
                  } 
=======

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: nanameru/claude-code-base-action@main
        with:
          use_oauth: 'true'
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}


